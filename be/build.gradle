plugins {
    id 'java'
    id 'org.springframework.boot' version '2.6.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.sonarqube' version '3.3'
    id 'jacoco'
}

group 'com.seed'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    // spring
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // mysql
    implementation 'mysql:mysql-connector-java'

    // log
    implementation 'net.rakugakibox.spring.boot:logback-access-spring-boot-starter:2.7.1'
    implementation 'ch.qos.logback:logback-classic'

    // test
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    testLogging {
        showStandardStreams = true
        showCauses = true
        showExceptions = true
        showStackTraces = true
        exceptionFormat = 'full'
    }

    useJUnitPlatform()
}

task testCoverage(type: Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(test, jacocoTestReport, jacocoTestCoverageVerification)
    jacocoTestReport.mustRunAfter(test)
    jacocoTestCoverageVerification.mustRunAfter(jacocoTestReport)
}

check {
    dependsOn(testCoverage)
}

sonarqube {
    properties {
        property "sonar.projectKey", "chess"

        property "sonar.java.binaries", "${buildDir}/classes"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main/java"

        property "sonar.tests", "src/test/java"
        property "sonar.test.inclusions", "**/*Test.java"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

jacoco {
    toolVersion = '0.8.7'
}

jacocoTestReport {
    reports {
        html.required = false
        xml.required = true
        csv.required = false
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = false
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.50
            }

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.50
            }
        }
    }
}

jar {
    enabled = false
}
